<script>

// script to favourite a product on a product page
document.addEventListener('DOMContentLoaded', () => {
  
  const starBtn = document.querySelector('#wv-product-page .product-img-container .favourite-star');
  if (!starBtn) return; // Not on product page

  const product = {
    type: 'product',
    title: '{{ product.title | escape }}',
    url: '{{ shop.url }}{{ product.url }}',
    image: '{{ product.featured_image | img_url: 'medium' }}',
    vendor: '{{ product.vendor | escape }}'
  };

  // check if product is already in favorites
  const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
  const alreadyFavorited = favorites.some(fav => fav.url === product.url);

  if (alreadyFavorited) {
    starBtn.classList.add('favorited');
    console.log('This product is already favvved!');
  };

  starBtn.addEventListener('click', () => {
    let updatedFavorites = JSON.parse(localStorage.getItem('favorites') || '[]');
    const isFavorited = updatedFavorites.some(fav => fav.url === product.url);

    if (isFavorited) {
      // remove from favorites
      updatedFavorites = updatedFavorites.filter(fav => fav.url !== product.url);
      starBtn.classList.remove('favorited');
    } else {
      // add to favorites
      updatedFavorites.push(product);
      starBtn.classList.add('favorited');
    };
    localStorage.setItem('favorites', JSON.stringify(updatedFavorites));
  });
});

// script to favourite a creator on a /pages page
document.addEventListener('DOMContentLoaded', () => {
  
  const starBtn = document.querySelector('#wv-public-listing .title-favourite .favourite-creator-star');
  if (!starBtn) return; // Not on creator page

  {% assign profile_picture = page.metafields.custom.creator_profile_picture %}
  const creator = {
    type: 'creator',
    name: '{{ page.metafields.custom.creator_display_name }}',
    url: '{{ shop.url }}{{ page.url }}',
    image: '{% if profile_picture and profile_picture.value %}{{ profile_picture.value | img_url: 'master' }}{% else %}https://cdn.shopify.com/s/files/1/0024/9551/2691/files/unknown-user.png?v=1752425659{% endif %}',
  };

  // check if creator is already in favorites
  const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
  const alreadyFavorited = favorites.some(fav => fav.url === creator.url);

  if (alreadyFavorited) {
    starBtn.classList.add('favorited');
  };

  starBtn.addEventListener('click', () => {
    let updatedFavorites = JSON.parse(localStorage.getItem('favorites') || '[]');
    const isFavorited = updatedFavorites.some(fav => fav.url === creator.url);

    if (isFavorited) {
      // remove from favorites
      updatedFavorites = updatedFavorites.filter(fav => fav.url !== creator.url);
      starBtn.classList.remove('favorited');
    } else {
      // add to favorites
      updatedFavorites.push(creator);
      starBtn.classList.add('favorited');
    };
    localStorage.setItem('favorites', JSON.stringify(updatedFavorites));
  });
});

// check if product is out of stock
async function hasInventory(handle) {
  const STOREFRONT_TOKEN = 'd30c12f58fe95437d0a7f5c36ea49dd9';
  const SHOP_DOMAIN = '{{ shop.permanent_domain }}';

  const query = `
    {
      productByHandle(handle: "${handle}") {
        variants(first: 1) {
          edges {
            node {
              availableForSale
            }
          }
        }
      }
    }
  `;

  try {
    const response = await fetch(`https://${SHOP_DOMAIN}/api/2023-10/graphql.json`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Storefront-Access-Token': STOREFRONT_TOKEN
      },
      body: JSON.stringify({ query })
    });

    const data = await response.json();

    const available = data?.data?.productByHandle?.variants?.edges?.[0]?.node?.availableForSale;
    return Boolean(available); // true if availableForSale is true, false otherwise

  } catch (err) {
    console.error('Error checking inventory:', err);
    return false;
  }
};

// checks if the URL returns a 404 (remove domain, only pass in /....)
async function checkUrlStatus(path) {
  try {
    const res = await fetch(path);
    return res.status !== 404;
  } catch (err) {
    console.error('Fetch error:', err);
    return false;
  }
};
</script>